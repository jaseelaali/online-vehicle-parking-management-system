// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/proto/v1/adminservice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_Addnewslot_FullMethodName          = "/v1.AdminService/Addnewslot"
	AdminService_Updateslot_FullMethodName          = "/v1.AdminService/Updateslot"
	AdminService_Deleteslot_FullMethodName          = "/v1.AdminService/Deleteslot"
	AdminService_Displayslot_FullMethodName         = "/v1.AdminService/Displayslot"
	AdminService_DisplayPlaces_FullMethodName       = "/v1.AdminService/DisplayPlaces"
	AdminService_ParkingDetails_FullMethodName      = "/v1.AdminService/ParkingDetails"
	AdminService_ParkingHistory_FullMethodName      = "/v1.AdminService/ParkingHistory"
	AdminService_CustomerDetails_FullMethodName     = "/v1.AdminService/CustomerDetails"
	AdminService_CustomerDetailsbyId_FullMethodName = "/v1.AdminService/CustomerDetailsbyId"
	AdminService_DeleteCustomer_FullMethodName      = "/v1.AdminService/DeleteCustomer"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	Addnewslot(ctx context.Context, in *AddnewslotRequest, opts ...grpc.CallOption) (*Response, error)
	Updateslot(ctx context.Context, in *UpdateslotRequest, opts ...grpc.CallOption) (*Response, error)
	Deleteslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Response, error)
	Displayslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (AdminService_DisplayslotClient, error)
	DisplayPlaces(ctx context.Context, in *Noparam, opts ...grpc.CallOption) (AdminService_DisplayPlacesClient, error)
	ParkingDetails(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error)
	ParkingHistory(ctx context.Context, in *ParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error)
	CustomerDetails(ctx context.Context, in *CustomerDetailsRequest, opts ...grpc.CallOption) (*Response, error)
	CustomerDetailsbyId(ctx context.Context, in *CustomerDetailsbyIdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Response, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Addnewslot(ctx context.Context, in *AddnewslotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_Addnewslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Updateslot(ctx context.Context, in *UpdateslotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_Updateslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Deleteslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_Deleteslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Displayslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (AdminService_DisplayslotClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_Displayslot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceDisplayslotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_DisplayslotClient interface {
	Recv() (*DisplayslotResponse, error)
	grpc.ClientStream
}

type adminServiceDisplayslotClient struct {
	grpc.ClientStream
}

func (x *adminServiceDisplayslotClient) Recv() (*DisplayslotResponse, error) {
	m := new(DisplayslotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) DisplayPlaces(ctx context.Context, in *Noparam, opts ...grpc.CallOption) (AdminService_DisplayPlacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_DisplayPlaces_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceDisplayPlacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_DisplayPlacesClient interface {
	Recv() (*DisplayPlacesResponse, error)
	grpc.ClientStream
}

type adminServiceDisplayPlacesClient struct {
	grpc.ClientStream
}

func (x *adminServiceDisplayPlacesClient) Recv() (*DisplayPlacesResponse, error) {
	m := new(DisplayPlacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) ParkingDetails(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error) {
	out := new(ParkingDetailsResponse)
	err := c.cc.Invoke(ctx, AdminService_ParkingDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ParkingHistory(ctx context.Context, in *ParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error) {
	out := new(ParkingDetailsResponse)
	err := c.cc.Invoke(ctx, AdminService_ParkingHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CustomerDetails(ctx context.Context, in *CustomerDetailsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_CustomerDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CustomerDetailsbyId(ctx context.Context, in *CustomerDetailsbyIdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_CustomerDetailsbyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AdminService_DeleteCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	Addnewslot(context.Context, *AddnewslotRequest) (*Response, error)
	Updateslot(context.Context, *UpdateslotRequest) (*Response, error)
	Deleteslot(context.Context, *SlotRequest) (*Response, error)
	Displayslot(*SlotRequest, AdminService_DisplayslotServer) error
	DisplayPlaces(*Noparam, AdminService_DisplayPlacesServer) error
	ParkingDetails(context.Context, *SlotRequest) (*ParkingDetailsResponse, error)
	ParkingHistory(context.Context, *ParkingHistoryRequest) (*ParkingDetailsResponse, error)
	CustomerDetails(context.Context, *CustomerDetailsRequest) (*Response, error)
	CustomerDetailsbyId(context.Context, *CustomerDetailsbyIdRequest) (*Response, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Response, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Addnewslot(context.Context, *AddnewslotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addnewslot not implemented")
}
func (UnimplementedAdminServiceServer) Updateslot(context.Context, *UpdateslotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateslot not implemented")
}
func (UnimplementedAdminServiceServer) Deleteslot(context.Context, *SlotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteslot not implemented")
}
func (UnimplementedAdminServiceServer) Displayslot(*SlotRequest, AdminService_DisplayslotServer) error {
	return status.Errorf(codes.Unimplemented, "method Displayslot not implemented")
}
func (UnimplementedAdminServiceServer) DisplayPlaces(*Noparam, AdminService_DisplayPlacesServer) error {
	return status.Errorf(codes.Unimplemented, "method DisplayPlaces not implemented")
}
func (UnimplementedAdminServiceServer) ParkingDetails(context.Context, *SlotRequest) (*ParkingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkingDetails not implemented")
}
func (UnimplementedAdminServiceServer) ParkingHistory(context.Context, *ParkingHistoryRequest) (*ParkingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkingHistory not implemented")
}
func (UnimplementedAdminServiceServer) CustomerDetails(context.Context, *CustomerDetailsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetails not implemented")
}
func (UnimplementedAdminServiceServer) CustomerDetailsbyId(context.Context, *CustomerDetailsbyIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetailsbyId not implemented")
}
func (UnimplementedAdminServiceServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Addnewslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddnewslotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Addnewslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Addnewslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Addnewslot(ctx, req.(*AddnewslotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Updateslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateslotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Updateslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Updateslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Updateslot(ctx, req.(*UpdateslotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Deleteslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Deleteslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Deleteslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Deleteslot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Displayslot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).Displayslot(m, &adminServiceDisplayslotServer{stream})
}

type AdminService_DisplayslotServer interface {
	Send(*DisplayslotResponse) error
	grpc.ServerStream
}

type adminServiceDisplayslotServer struct {
	grpc.ServerStream
}

func (x *adminServiceDisplayslotServer) Send(m *DisplayslotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_DisplayPlaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Noparam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).DisplayPlaces(m, &adminServiceDisplayPlacesServer{stream})
}

type AdminService_DisplayPlacesServer interface {
	Send(*DisplayPlacesResponse) error
	grpc.ServerStream
}

type adminServiceDisplayPlacesServer struct {
	grpc.ServerStream
}

func (x *adminServiceDisplayPlacesServer) Send(m *DisplayPlacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_ParkingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ParkingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ParkingDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ParkingDetails(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ParkingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ParkingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ParkingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ParkingHistory(ctx, req.(*ParkingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CustomerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CustomerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CustomerDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CustomerDetails(ctx, req.(*CustomerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CustomerDetailsbyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailsbyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CustomerDetailsbyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CustomerDetailsbyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CustomerDetailsbyId(ctx, req.(*CustomerDetailsbyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addnewslot",
			Handler:    _AdminService_Addnewslot_Handler,
		},
		{
			MethodName: "Updateslot",
			Handler:    _AdminService_Updateslot_Handler,
		},
		{
			MethodName: "Deleteslot",
			Handler:    _AdminService_Deleteslot_Handler,
		},
		{
			MethodName: "ParkingDetails",
			Handler:    _AdminService_ParkingDetails_Handler,
		},
		{
			MethodName: "ParkingHistory",
			Handler:    _AdminService_ParkingHistory_Handler,
		},
		{
			MethodName: "CustomerDetails",
			Handler:    _AdminService_CustomerDetails_Handler,
		},
		{
			MethodName: "CustomerDetailsbyId",
			Handler:    _AdminService_CustomerDetailsbyId_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _AdminService_DeleteCustomer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Displayslot",
			Handler:       _AdminService_Displayslot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DisplayPlaces",
			Handler:       _AdminService_DisplayPlaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/adminservice.proto",
}
