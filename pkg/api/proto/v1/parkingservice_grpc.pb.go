// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/proto/v1/parkingservice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ParkingService_Addnewslot_FullMethodName     = "/v1.ParkingService/Addnewslot"
	ParkingService_Updateslot_FullMethodName     = "/v1.ParkingService/Updateslot"
	ParkingService_Deleteslot_FullMethodName     = "/v1.ParkingService/Deleteslot"
	ParkingService_Displayslot_FullMethodName    = "/v1.ParkingService/Displayslot"
	ParkingService_ParkingDetails_FullMethodName = "/v1.ParkingService/ParkingDetails"
	ParkingService_ParkingHistory_FullMethodName = "/v1.ParkingService/ParkingHistory"
)

// ParkingServiceClient is the client API for ParkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingServiceClient interface {
	Addnewslot(ctx context.Context, in *AddnewslotRequest, opts ...grpc.CallOption) (*Response, error)
	Updateslot(ctx context.Context, in *UpdateslotRequest, opts ...grpc.CallOption) (*Response, error)
	Deleteslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Response, error)
	Displayslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*DisplayslotResponse, error)
	ParkingDetails(ctx context.Context, in *Noparam, opts ...grpc.CallOption) (*Response, error)
	ParkingHistory(ctx context.Context, in *ParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error)
}

type parkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingServiceClient(cc grpc.ClientConnInterface) ParkingServiceClient {
	return &parkingServiceClient{cc}
}

func (c *parkingServiceClient) Addnewslot(ctx context.Context, in *AddnewslotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ParkingService_Addnewslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) Updateslot(ctx context.Context, in *UpdateslotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ParkingService_Updateslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) Deleteslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ParkingService_Deleteslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) Displayslot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*DisplayslotResponse, error) {
	out := new(DisplayslotResponse)
	err := c.cc.Invoke(ctx, ParkingService_Displayslot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ParkingDetails(ctx context.Context, in *Noparam, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ParkingService_ParkingDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ParkingHistory(ctx context.Context, in *ParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingDetailsResponse, error) {
	out := new(ParkingDetailsResponse)
	err := c.cc.Invoke(ctx, ParkingService_ParkingHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingServiceServer is the server API for ParkingService service.
// All implementations must embed UnimplementedParkingServiceServer
// for forward compatibility
type ParkingServiceServer interface {
	Addnewslot(context.Context, *AddnewslotRequest) (*Response, error)
	Updateslot(context.Context, *UpdateslotRequest) (*Response, error)
	Deleteslot(context.Context, *SlotRequest) (*Response, error)
	Displayslot(context.Context, *SlotRequest) (*DisplayslotResponse, error)
	ParkingDetails(context.Context, *Noparam) (*Response, error)
	ParkingHistory(context.Context, *ParkingHistoryRequest) (*ParkingDetailsResponse, error)
	mustEmbedUnimplementedParkingServiceServer()
}

// UnimplementedParkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkingServiceServer struct {
}

func (UnimplementedParkingServiceServer) Addnewslot(context.Context, *AddnewslotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addnewslot not implemented")
}
func (UnimplementedParkingServiceServer) Updateslot(context.Context, *UpdateslotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updateslot not implemented")
}
func (UnimplementedParkingServiceServer) Deleteslot(context.Context, *SlotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteslot not implemented")
}
func (UnimplementedParkingServiceServer) Displayslot(context.Context, *SlotRequest) (*DisplayslotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Displayslot not implemented")
}
func (UnimplementedParkingServiceServer) ParkingDetails(context.Context, *Noparam) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkingDetails not implemented")
}
func (UnimplementedParkingServiceServer) ParkingHistory(context.Context, *ParkingHistoryRequest) (*ParkingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkingHistory not implemented")
}
func (UnimplementedParkingServiceServer) mustEmbedUnimplementedParkingServiceServer() {}

// UnsafeParkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServiceServer will
// result in compilation errors.
type UnsafeParkingServiceServer interface {
	mustEmbedUnimplementedParkingServiceServer()
}

func RegisterParkingServiceServer(s grpc.ServiceRegistrar, srv ParkingServiceServer) {
	s.RegisterService(&ParkingService_ServiceDesc, srv)
}

func _ParkingService_Addnewslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddnewslotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).Addnewslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_Addnewslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).Addnewslot(ctx, req.(*AddnewslotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_Updateslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateslotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).Updateslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_Updateslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).Updateslot(ctx, req.(*UpdateslotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_Deleteslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).Deleteslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_Deleteslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).Deleteslot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_Displayslot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).Displayslot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_Displayslot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).Displayslot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ParkingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noparam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ParkingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ParkingDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ParkingDetails(ctx, req.(*Noparam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ParkingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ParkingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ParkingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ParkingHistory(ctx, req.(*ParkingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingService_ServiceDesc is the grpc.ServiceDesc for ParkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ParkingService",
	HandlerType: (*ParkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addnewslot",
			Handler:    _ParkingService_Addnewslot_Handler,
		},
		{
			MethodName: "Updateslot",
			Handler:    _ParkingService_Updateslot_Handler,
		},
		{
			MethodName: "Deleteslot",
			Handler:    _ParkingService_Deleteslot_Handler,
		},
		{
			MethodName: "Displayslot",
			Handler:    _ParkingService_Displayslot_Handler,
		},
		{
			MethodName: "ParkingDetails",
			Handler:    _ParkingService_ParkingDetails_Handler,
		},
		{
			MethodName: "ParkingHistory",
			Handler:    _ParkingService_ParkingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/parkingservice.proto",
}
