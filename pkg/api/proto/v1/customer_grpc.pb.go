// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/proto/v1/customer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerService_SlotCheck_FullMethodName           = "/v1.CustomerService/SlotCheck"
	CustomerService_SlotBooking_FullMethodName         = "/v1.CustomerService/SlotBooking"
	CustomerService_Pay_FullMethodName                 = "/v1.CustomerService/Pay"
	CustomerService_BookingList_FullMethodName         = "/v1.CustomerService/BookingList"
	CustomerService_Checkout_FullMethodName            = "/v1.CustomerService/Checkout"
	CustomerService_CustomerDetails_FullMethodName     = "/v1.CustomerService/CustomerDetails"
	CustomerService_CustomerDetailsbyId_FullMethodName = "/v1.CustomerService/CustomerDetailsbyId"
	CustomerService_DeleteCustomer_FullMethodName      = "/v1.CustomerService/DeleteCustomer"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	SlotCheck(ctx context.Context, in *SlotCheckRequest, opts ...grpc.CallOption) (*Response, error)
	SlotBooking(ctx context.Context, in *SlotBookingRequest, opts ...grpc.CallOption) (*Response, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Response, error)
	BookingList(ctx context.Context, in *BookingListRequest, opts ...grpc.CallOption) (*Response, error)
	Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*Response, error)
	CustomerDetails(ctx context.Context, in *CustomerDetailsRequest, opts ...grpc.CallOption) (*Response, error)
	CustomerDetailsbyId(ctx context.Context, in *CustomerDetailsbyIdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Response, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) SlotCheck(ctx context.Context, in *SlotCheckRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_SlotCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) SlotBooking(ctx context.Context, in *SlotBookingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_SlotBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_Pay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) BookingList(ctx context.Context, in *BookingListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_BookingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Checkout(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_Checkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerDetails(ctx context.Context, in *CustomerDetailsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_CustomerDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CustomerDetailsbyId(ctx context.Context, in *CustomerDetailsbyIdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_CustomerDetailsbyId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CustomerService_DeleteCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	SlotCheck(context.Context, *SlotCheckRequest) (*Response, error)
	SlotBooking(context.Context, *SlotBookingRequest) (*Response, error)
	Pay(context.Context, *PayRequest) (*Response, error)
	BookingList(context.Context, *BookingListRequest) (*Response, error)
	Checkout(context.Context, *CheckoutRequest) (*Response, error)
	CustomerDetails(context.Context, *CustomerDetailsRequest) (*Response, error)
	CustomerDetailsbyId(context.Context, *CustomerDetailsbyIdRequest) (*Response, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Response, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) SlotCheck(context.Context, *SlotCheckRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotCheck not implemented")
}
func (UnimplementedCustomerServiceServer) SlotBooking(context.Context, *SlotBookingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotBooking not implemented")
}
func (UnimplementedCustomerServiceServer) Pay(context.Context, *PayRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedCustomerServiceServer) BookingList(context.Context, *BookingListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingList not implemented")
}
func (UnimplementedCustomerServiceServer) Checkout(context.Context, *CheckoutRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedCustomerServiceServer) CustomerDetails(context.Context, *CustomerDetailsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetails not implemented")
}
func (UnimplementedCustomerServiceServer) CustomerDetailsbyId(context.Context, *CustomerDetailsbyIdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerDetailsbyId not implemented")
}
func (UnimplementedCustomerServiceServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_SlotCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SlotCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_SlotCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SlotCheck(ctx, req.(*SlotCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_SlotBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).SlotBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_SlotBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).SlotBooking(ctx, req.(*SlotBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_BookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).BookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_BookingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).BookingList(ctx, req.(*BookingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Checkout(ctx, req.(*CheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CustomerDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerDetails(ctx, req.(*CustomerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CustomerDetailsbyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDetailsbyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CustomerDetailsbyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CustomerDetailsbyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CustomerDetailsbyId(ctx, req.(*CustomerDetailsbyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SlotCheck",
			Handler:    _CustomerService_SlotCheck_Handler,
		},
		{
			MethodName: "SlotBooking",
			Handler:    _CustomerService_SlotBooking_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _CustomerService_Pay_Handler,
		},
		{
			MethodName: "BookingList",
			Handler:    _CustomerService_BookingList_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _CustomerService_Checkout_Handler,
		},
		{
			MethodName: "CustomerDetails",
			Handler:    _CustomerService_CustomerDetails_Handler,
		},
		{
			MethodName: "CustomerDetailsbyId",
			Handler:    _CustomerService_CustomerDetailsbyId_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CustomerService_DeleteCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/customer.proto",
}
